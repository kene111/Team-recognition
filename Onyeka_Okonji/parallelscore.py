# -*- coding: utf-8 -*-
"""parallelscore.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d9CLOygZiF71228nY6roNcO94VaPQVPR

###### installs
"""

"""###### imports"""

import pixellib
from pixellib.torchbackend.instance import instanceSegmentation

import shutil 
import os

import tensorflow as tf
from keras.applications.inception_v3 import InceptionV3
from keras.applications.inception_v3 import preprocess_input
from keras.preprocessing import image
from keras.preprocessing.image import img_to_array
from sklearn.cluster import KMeans
import pandas as pd
import numpy as np
from tqdm import tqdm

"""###### load in video input"""

video_dir = '/Users/onyekachukwuokonji/Desktop/PS/deepsort_30sec.mp4'

"""###### get segmented objects"""

def get_all_player_images(video_dir):
  os.makedirs('Players', exist_ok = True)

  # Made folder to seperate images
  os.makedirs('Napoli', exist_ok = True)
  os.makedirs('Barcelona', exist_ok = True)

  segment_video = instanceSegmentation()

  segment_video.load_model('/Users/onyekachukwuokonji/Desktop/PS/pointrend_resnet50.pkl', detection_speed = 'fast', confidence = 0.5)

  target_classes = segment_video.select_target_classes(person = True)

  segment_video.process_video(video_dir, show_bboxes = False, extract_segmented_objects = True,
                              save_extracted_objects = True, frames_per_second = 5,
                              segment_target_classes = target_classes)
  
  for i in os.listdir('/Users/onyekachukwuokonji/Desktop/PS'):
    if i.startswith('segmented_object'):
      all_players = shutil.move(os.path.join('/Users/onyekachukwuokonji/Desktop/PS', i), '/Users/onyekachukwuokonji/Desktop/PS/Players', copy_function = shutil.copy2)

  return all_players

"""###### get features of segmented objects images"""

def get_image_features(directory):

    model = InceptionV3(weights='imagenet', include_top=False)

    features = []
    img_name = []

    for i in os.listdir(directory):
        fname = os.path.join(directory, i)
        img=image.load_img(fname,target_size=(224,224))
        x = img_to_array(img)
        x=np.expand_dims(x,axis=0)
        x=preprocess_input(x)
        feat=model.predict(x)
        feat=feat.flatten()
        features.append(feat)
        img_name.append(i)

    return features,img_name


"""###### get images per team"""

def get_team_player_images(img_features, img_name):
  clusters = KMeans(n_clusters = 2, max_iter = 700, random_state = 1)
  clusters.fit(img_features)

  image_cluster = pd.DataFrame(img_name,columns=['Images'])
  image_cluster["Teams"] = clusters.labels_
  
  # Images will be seperated according to cluster they belong
  for j in range(len(image_cluster)):
      if image_cluster['Teams'][j] == 0:
          shutil.move(os.path.join('/Users/onyekachukwuokonji/Desktop/PS/Players', image_cluster['Images'][j]), '/User/onyekachukwuokonji/Desktop/PS/Napoli', copy_function=shutil.copy2)
          first_team = shutil.make_archive('Napoli', 'zip', '/Users/onyekachukwuokonji/Desktop/PS/Napoli')
        
      else:
          shutil.move(os.path.join('/Users/onyekachukwuokonji/Desktop/PS/Players', image_cluster['Images'][j]), '/User/onyekachukwuokonji/Desktop/PS/Barcelona', copy_function=shutil.copy2)
          second_team = shutil.make_archive('Barcelona', 'zip', '/Users/onyekachukwuokonji/Desktop/PS/Barcelona')

  
  return first_team, second_team

"""##### summing it all up"""

def final_fn(video_dir):
  all_players = get_all_player_images(video_dir = video_dir)
  img_features, img_name = get_image_features(all_players)
  first_team, second_team = get_team_player_images(img_features, img_name)

  return first_team, second_team

# TeamA, TeamB = final_fn(video_dir)

if __name__ == '__main__':
    final_fn(video_dir)